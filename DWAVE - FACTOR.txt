

def to_base_ten(sample):
    a = b = 0
    
    # we know that multiplication_circuit() has created these variables
    a_vars = ['a0', 'a1', 'a2', 'a3', 'a4', 'a5']
    b_vars = ['b0', 'b1', 'b2', 'a3', 'b4', 'b5']
    
    for lbl in reversed(a_vars):
        if lbl in sample:
          a = (a << 1) | sample[lbl]
    for lbl in reversed(b_vars):
        if lbl in sample:
          b = (b << 1) | sample[lbl] 
        
    return a,b

def sanitised_input(P, range_):
    start = range_[0]
    stop = range_[-1]
    print ('P:',P)

    if P not in range_:
            print("Input must be between {} and {}".format(start, stop))
            P=0

    return P

import dwavebinarycsp as dbc
# Set an integer to factor
P = 49
anneal_time = 10.0
pause_duration = 10.0      # Must be greater than 0
pause_start = 0.50        # Must be between 0 and 1
runs=1000

P = sanitised_input(P, range(2 ** 8))
if P==0:
    exit()

schedule=[[0.0,0.0],[pause_start*anneal_time,pause_start],[pause_start*anneal_time+pause_duration, pause_start],[anneal_time+pause_duration, 1.0]]

# A binary representation of P ("{:06b}" formats for 6-bit binary)
bP = "{:010b}".format(P)
print(bP)
csp = dbc.factories.multiplication_circuit(5)
# Print one of the CSP's constraints, the gates that constitute 3-bit binary multiplication
print(next(iter(csp.constraints)))
# Convert the CSP into BQM bqm
bqm = dbc.stitch(csp, min_classical_gap=.1)
# Print a sample coefficient (one of the programable inputs to a D-Wave system)
#print("p0: ", bqm.linear['p0'])
#print("linear: ", bqm.linear)
# Our multiplication_circuit() creates these variables
p_vars = ['p0', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9']
#p_vars = ['p0', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8']
#p_vars = ['p0', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6']

# Convert P from decimal to binary
fixed_variables = dict(zip(reversed(p_vars), "{:010b}".format(P)))
fixed_variables = {var: int(x) for(var, x) in fixed_variables.items()}

print('fixing vars:')
# Fix product variables
for var, value in fixed_variables.items():
    bqm.fix_variable(var, value)
    print (var, value)
# Confirm that a P variable has been removed from the BQM, for example, "p0"
print("Variable p0 in BQM: ", 'p0' in bqm)
print("Variable a0 in BQM: ", 'a0' in bqm)

from helpers.solvers import default_solver
my_solver, my_token = default_solver()

from dwave.system.samplers import DWaveSampler
# Use a D-Wave system as the sampler
sampler = DWaveSampler(solver=my_solver, token=my_token)
_, target_edgelist, target_adjacency = sampler.structure
#print ( target_edgelist)
import dimod
#from helpers.embedding import embeddings

# Set a pre-calculated minor-embeding
#embedding = embeddings[sampler.solver.id]
import minorminer

# Find an embedding
embedding = minorminer.find_embedding(bqm.quadratic, target_edgelist)
if bqm and not embedding:
    raise ValueError("no embedding found")

# Apply the embedding to the factoring problem to map it to the QPU
bqm_embedded = dimod.embed_bqm(bqm, embedding, target_adjacency, 3.0)

# Confirm mapping of variables from a0, b0, etc to indexed qubits 
#print("Variable a0 in embedded BQM: ", 'a0' in bqm_embedded)
#print ('bqm_embedded',bqm_embedded)
#print("Variable b0 in embedded BQM: ", 'b0' in bqm_embedded)
# Return num_reads solutions (responses are in the D-Wave's graph of indexed qubits)
kwargs = {}
if 'num_reads' in sampler.parameters:
    kwargs['num_reads'] = runs
if 'answer_mode' in sampler.parameters:
    kwargs['answer_mode'] = 'histogram'
if 'anneal_schedule' in sampler.parameters:
    kwargs['anneal_schedule'] = schedule   
response = sampler.sample(bqm_embedded, **kwargs)
#print("A solution indexed by qubits: \n", next(response.data(fields=['sample'])))
#print (response )
#print ('config:',sampler.parameters )
# Map back to the BQM's graph (nodes labeled "a0", "b0" etc,)
response = dimod.unembed_response(response, embedding, source_bqm=bqm)
print("\nThe solution in problem variables: \n",next(response.data(fields=['sample'])))
#print("\nThe solution dtype: \n",next(response.data(fields=['dtype'])))

#from helpers.convert import to_base_ten
# Select just just the first sample. 
#sample = next(response.samples(n=1))
#dict(sample)


print("QPU time used:", response.info['timing']['qpu_access_time'], "microseconds.")

from collections import OrderedDict

# Function for converting the response to a dict of integer values
def response_to_dict(response,p):
    results_dict = OrderedDict()
    for sample, energy in response.data(['sample', 'energy']):
        # Convert A and B from binary to decimal
        a, b = to_base_ten(sample)
        # Aggregate results by unique A and B values (ignoring internal circuit variables)
        if (a, b) not in results_dict:
            results_dict[(a, b,a*b,(p-a*b))] = energy
            
    return results_dict

# Convert the dimod.Response object to a dict and display it
results = response_to_dict(response,P)
#results
#print ('results:' )
#for i in results:
#    print (i)
#print (response )
import numpy as np
mine= np.amin(response.record.energy)
print ('min energy',mine)


#print (response.record.energy)

goodcnt =0
for sample, energy in response.data(['sample', 'energy']):
    a, b = to_base_ten(sample)
    if (a * b == P):
        print("Given integer P={}, found factors a={} and b={}".format(P, a, b))
        goodcnt +=1
success = goodcnt/runs
print("Success probability: ",success)